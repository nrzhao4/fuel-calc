{"version":3,"sources":["components/SelectYear.js","components/SelectMake.js","components/SelectModel.js","components/SelectOption.js","components/SelectCar.js","components/Result.js","components/ButtonDone.js","components/ButtonReset.js","components/Mileage.js","components/Instructions.js","App.js","index.js"],"names":["convertToJson","require","parseString","SelectYear","props","state","years","fetch","then","response","text","data","err","convertedData","yearsFromApi","menuItems","menuItem","map","item","value","display","setState","concat","className","this","onChange","onChangeHandler","year","key","React","Component","SelectMake","makes","info","fetchData","bind","selectedYear","source","makesFromApi","prevProps","make","SelectModel","models","selectedMake","modelsFromApi","model","options","selectedModel","optionsFromApi","option","SelectCar","vehicleId","onChangeYear","onChangeMake","onChangeModel","onChangeOption","event","target","prevState","selectedOption","selectedName","onCarSelected","id","SelectOption","Result","results","cars","car","calculate","carMpg","yourMpgVehicle","avgMpg","mpg","result","distance","isMiles","isUnitsMiles","convertedMpg","Math","floor","name","estimatedGasConsumption","mpgs","style","fontSize","href","ButtonDone","onClick","onClickDone","ButtonReset","onClickReset","Mileage","handleDistance","onSelectUnit","onMileageInput","percentHwy","resizeInput","width","length","type","Instructions","App","showResult","toCompare","calculationInfo","document","title","alert","isNaN","window","location","reload","carNumber","justifyContent","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.bb9ec957.chunk.js","sourcesContent":["import React from 'react';\n\nconst convertToJson = require('xml2js').parseString;\n\nclass SelectYear extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { years: [] }\n\n    }\n\n    componentDidMount() {\n        fetch('https://www.fueleconomy.gov/ws/rest/vehicle/menu/year')\n        .then(response => response.text())\n        .then(data => {\n          convertToJson(data, (err, convertedData) => {\n              let yearsFromApi = convertedData.menuItems.menuItem.map((item) => {\n                return {value: item.value[0], display: item.value[0]}\n              });\n              this.setState({\n                years: [{value: '', display: 'Select Year'}].concat(yearsFromApi)\n              });\n          })\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <select className='dropdown' value={this.state.value} onChange={this.props.onChangeHandler}>\n                    {this.state.years.map((year) => <option key={year.value} value={year.value}>{year.display}</option>)}\n                </select>\n            </div>\n            \n        );\n    }\n}\n\nexport default SelectYear;","import React from 'react';\n\nconst convertToJson = require('xml2js').parseString;\n\nclass SelectMake extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { makes: [], year: this.props.info.year }\n\n        this.fetchData = this.fetchData.bind(this);\n    }\n\n    fetchData() {\n        const selectedYear = this.state.year;\n        const source = `https://www.fueleconomy.gov/ws/rest/vehicle/menu/make?year=${selectedYear}`;\n        fetch(source).then(response => response.text())\n        .then(data => {\n            convertToJson(data, (err, convertedData) => {\n                let makesFromApi = convertedData.menuItems.menuItem.map((item) => {\n                    return {value: item.value[0], display: item.value[0]}\n                });\n                this.setState({\n                    makes: [{value: '', display: 'Select make'}].concat(makesFromApi)\n                });\n            })\n        })\n    }\n\n    componentDidMount() {\n        if(this.state.year !== '') {\n            this.fetchData();\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if(this.props.info.year !== prevProps.info.year) {\n            this.setState({\n                makes: [], year: this.props.info.year\n            }, () => {\n                this.fetchData()\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <select className='dropdown' value={this.state.value} onChange={this.props.onChangeHandler}>\n                    {this.state.makes.map((make) => <option key={make.value} value={make.value}>{make.display}</option>)}\n                </select>\n            </div>\n        );\n    }\n}\n\nexport default SelectMake;","import React from 'react';\n\nconst convertToJson = require('xml2js').parseString;\n\nclass SelectModel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            models: [], \n            year: this.props.info.year,\n            make: this.props.info.make \n        }\n\n        this.fetchData = this.fetchData.bind(this);\n    }\n\n    fetchData() {\n        const selectedYear = this.state.year;\n        const selectedMake = this.state.make;\n        const source = `https://www.fueleconomy.gov/ws/rest/vehicle/menu/model?year=${selectedYear}&make=${selectedMake}`;\n        fetch(source).then(response => response.text())\n        .then(data => {\n            convertToJson(data, (err, convertedData) => {\n                let modelsFromApi = convertedData.menuItems.menuItem.map((item) => {\n                    return {value: item.value[0], display: item.value[0]}\n                });\n                this.setState({\n                    models: [{value: '', display: 'Select model'}].concat(modelsFromApi)\n                });\n            })\n        })\n    }\n\n    componentDidMount() {\n        if(this.state.make !== '') {\n            this.fetchData();\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if(this.props.info.make !== prevProps.info.make) {\n            this.setState({\n                models: [], year: this.props.info.year, make: this.props.info.make\n            }, () => {\n                this.fetchData()\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <select className='dropdown' value={this.state.value} onChange={this.props.onChangeHandler}>\n                    {this.state.models.map((model) => <option key={model.value} value={model.value}>{model.display}</option>)}\n                </select>\n            </div> \n        );\n    }\n}\n\nexport default SelectModel;","import React from 'react';\n\nconst convertToJson = require('xml2js').parseString;\n\nclass SelectModel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            options: [], \n            year: this.props.info.year,\n            make: this.props.info.make,\n            model: this.props.info.model,\n        }\n        this.fetchData = this.fetchData.bind(this);\n    }\n\n    fetchData() {\n        const selectedYear = this.state.year;\n        const selectedMake = this.state.make;\n        const selectedModel = this.state.model;\n        const source = `https://www.fueleconomy.gov/ws/rest/vehicle/menu/options?year=${selectedYear}&make=${selectedMake}&model=${selectedModel}`;\n        fetch(source).then(response => response.text())\n        .then(data => {\n            convertToJson(data, (err, convertedData) => {\n                let optionsFromApi = convertedData.menuItems.menuItem.map((item) => {\n                    return {value: item.value[0], display: item.text[0]}\n                });\n                this.setState({\n                    options: [{value: '', display: 'Select option'}].concat(optionsFromApi)\n                });\n            })\n        })\n    }\n\n    componentDidMount() {\n        if(this.state.model !== '') {\n            this.fetchData();\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if(this.props.info.model !== prevProps.info.model) {\n            this.setState({\n                options: [], \n                year: this.props.info.year, \n                make: this.props.info.make,\n                model: this.props.info.model\n            }, () => {\n                this.fetchData()\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <select className='dropdown' value={this.state.value} onChange={this.props.onChangeHandler}>\n                    {this.state.options !== '' && this.state.options.map((option) => \n                        <option key={option.value} value={option.value}>{option.display}</option>\n                    )}\n                    {this.state.options === '' && <option value=''>N/A</option>}\n                </select> \n            </div>\n        );\n    }\n}\n\n//{this.state.options.map((option) => <option key={option.value} value={option.value}>{option.display}</option>)}\n\nexport default SelectModel;","import React from 'react';\nimport SelectYear from './SelectYear';\nimport SelectMake from './SelectMake';\nimport SelectModel from './SelectModel';\nimport SelectOption from './SelectOption';\n\nclass SelectCar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            year: '',\n            make: '',\n            model: '',\n            vehicleId: ''\n        }\n        this.onChangeYear = this.onChangeYear.bind(this);\n        this.onChangeMake = this.onChangeMake.bind(this);\n        this.onChangeModel = this.onChangeModel.bind(this);\n        this.onChangeOption = this.onChangeOption.bind(this);\n    }\n\n    // When a year is selected\n    onChangeYear(event) {\n        const selectedYear = event.target.value;\n        this.setState( prevState => ({\n            //...prevState,\n            year: selectedYear,\n            make: '',\n            model: '',\n            vehicleId: ''\n        }));\n    }\n\n    // When a make is selected\n    onChangeMake(event) {\n        const selectedMake = event.target.value;\n        this.setState( prevState => ({\n            //...prevState,\n            make: selectedMake,\n            model: '',\n            vehicleId: ''\n        }));\n    }\n\n    // When a model is selected\n    onChangeModel(event) {\n        const selectedModel = event.target.value;\n        this.setState( prevState => ({\n            //...prevState,\n            model: selectedModel,\n            vehicleId: ''\n        }));\n    }\n\n    // Selecting an option will return a vehicle id\n    onChangeOption(event) {\n        const selectedOption = event.target.value;\n        this.setState( prevState => ({\n            //...prevState,\n            vehicleId: selectedOption\n        }));\n        const selectedName = this.state.year + ' ' + this.state.make + ' ' + this.state.model;\n        this.props.onCarSelected(this.props.id, selectedName, selectedOption);\n    }\n\n    render() {\n        return (\n        <div className='select-car'>\n            <h1>Car {this.props.id}</h1>\n            <div className='flexbox'>\n                <label>Year: </label>\n                <SelectYear info={this.state} onChangeHandler={this.onChangeYear}/>\n            </div>\n\n            <div className='flexbox'>\n                <label>Make: </label>\n                {this.state.year !== '' && <SelectMake info={this.state} onChangeHandler={this.onChangeMake} />}    \n            </div>\n\n            <div className='flexbox'>\n                <label>Model: </label>\n                {this.state.make !== '' && <SelectModel info={this.state} onChangeHandler={this.onChangeModel} />}    \n            </div>\n\n            <div className='flexbox'>\n                <label>Option: </label>\n                {this.state.model !== '' && <SelectOption info={this.state} onChangeHandler={this.onChangeOption} />}    \n            </div>\n\n        </div>\n        )\n    }\n}\n\nexport default SelectCar;","import React from \"react\";\n\nconst convertToJson = require(\"xml2js\").parseString;\n\nclass Result extends React.Component {\n  constructor() {\n    super();\n    this.state = { results: [] };\n  }\n\n  componentDidMount(props) {\n    this.props.cars.map((car) => {\n      fetch(\n        `https://www.fueleconomy.gov/ws/rest/ympg/shared/ympgVehicle/${car.id}`\n      )\n        .then((response) => response.text())\n        .then((data) => {\n          convertToJson(data, (err, convertedData) => {\n            if (convertedData === null) {\n              this.calculate(car, null);\n            } else {\n              const carMpg = convertedData.yourMpgVehicle.avgMpg[0];\n              this.calculate(car, carMpg);\n            }\n          });\n        });\n    });\n  }\n\n  calculate(car, mpg) {\n    const distance = this.props.info.distance;\n    const isMiles = this.props.info.isUnitsMiles;\n    var result;\n\n    //if no mpg data, set result to null\n    if (mpg === null) {\n      this.setState((prevState) => ({\n        results: [\n          ...prevState.results,\n          { id: car.id, name: car.name, estimatedGasConsumption: null },\n        ],\n      }));\n      return;\n    }\n\n    //Convert distance from imperial to metric if needed\n    if (isMiles === \"0\") {\n      var convertedMpg = 235.214 / mpg;\n      result = Math.floor((convertedMpg * distance * 1.60934) / 100);\n\n      this.setState((prevState) => ({\n        results: [\n          ...prevState.results,\n          {\n            id: car.id,\n            name: car.name,\n            estimatedGasConsumption: result + \" L \",\n          },\n        ],\n      }));\n    } else {\n      result = Math.floor(distance / mpg);\n\n      this.setState((prevState) => ({\n        results: [\n          ...prevState.results,\n          {\n            id: car.id,\n            name: car.name,\n            estimatedGasConsumption: result + \" gal. \",\n          },\n        ],\n      }));\n    }\n  }\n\n  render() {\n    const results = this.state.results.map((car) => {\n      if (car.estimatedGasConsumption === null) {\n        return (\n          <h3 key={car.id}>\n            Sorry, there is no fuel economy data for {car.name}\n          </h3>\n        );\n      } else {\n        return (\n          <h3 key={car.id}>\n            The {car.name} will use {car.estimatedGasConsumption}\n            of fuel\n          </h3>\n        );\n      }\n    });\n    return (\n      <div className=\"results\">\n        {this.state.mpgs !== [] && results}\n        <p style={{ fontSize: \"12px\" }}>\n          *Results displayed are estimated based on data provided by{\" \"}\n          <a href={\"https://www.fueleconomy.gov/\"}>fueleconomy.gov</a>\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default Result;\n","import React from 'react';\n\nfunction ButtonDone(props) {\n    return (\n        <div>\n            <button className='button-primary' onClick={props.onClickDone}>Done</button>\n        </div>\n    );\n}\n\nexport default ButtonDone;","import React from \"react\";\n\nfunction ButtonReset(props) {\n  return (\n    <div>\n      <button className='button-secondary' onClick={props.onClickReset}>Reset</button>\n    </div>\n  );\n}\n\nexport default ButtonReset;\n","import React from 'react';\n\nclass Mileage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            distance: '',\n            isUnitsMiles: '0'\n        }\n        this.handleDistance = this.handleDistance.bind(this);\n        this.onSelectUnit = this.onSelectUnit.bind(this);\n    }\n\n    handleDistance(event) {\n        this.setState({\n            distance: event.target.value\n        }, () => {\n            this.props.onMileageInput(this.state.distance, \n                this.state.isUnitsMiles, this.state.percentHwy);\n        });\n    }\n\n    onSelectUnit(event) {\n        this.setState({\n            isUnitsMiles: event.target.value\n        }, () => {\n            this.props.onMileageInput(this.state.distance, \n                this.state.isUnitsMiles, this.state.percentHwy);\n        });\n    }\n\n    render() {\n        let inputLength;\n        if(this.state.distance.length < 1) {\n            inputLength = '36px';\n        } else {\n            inputLength = ((this.state.distance.length) * 12) + 'px'\n        }\n        const resizeInput = {\n            width: inputLength\n        }\n        return (\n            <div className='flexbox2'>\n                <div className='flexbox'>\n                    <label>Distance to drive: </label>\n                    <input type='text' style={resizeInput} value={this.state.distance}\n                        onChange={this.handleDistance} />\n                    <div>\n                        <select className='dropdown' value={this.state.isUnitsMiles} \n                        onChange={this.onSelectUnit}>\n                            <option value='0'>km</option>\n                            <option value='1'>mi</option>\n                        </select>\n                    </div>\n                </div> \n            </div>\n        )\n    }\n}\n\nexport default Mileage;","import React from \"react\";\n\nfunction Instructions() {\n  return (\n    <div>\n      <h1>Fuel Calc</h1>\n      <p>Instructions</p>\n      <ul>\n        <li>\n          <p>Use the dropdown lists to select one or two vehicles</p>\n        </li>\n        <li>\n          <p>Enter the distance you will be driving</p>\n        </li>\n        <li>\n          <p>\n            Click Done! An estimation of how much gas each car will use for the\n            trip will be shown\n          </p>\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nexport default Instructions;\n","import React from \"react\";\nimport \"./styles.css\";\nimport SelectCar from \"./components/SelectCar\";\nimport Result from \"./components/Result\";\nimport ButtonDone from \"./components/ButtonDone\";\nimport ButtonReset from \"./components/ButtonReset\";\nimport Mileage from \"./components/Mileage\";\nimport Instructions from \"./components/Instructions\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      showResult: false,\n      toCompare: [],\n      calculationInfo: null,\n    };\n    this.onClickDone = this.onClickDone.bind(this);\n    this.onClickReset = this.onClickReset.bind(this);\n    this.onCarSelected = this.onCarSelected.bind(this);\n    this.onMileageInput = this.onMileageInput.bind(this);\n  }\n\n  componentDidMount() {\n    document.title = \"Fuel Calc\";\n  }\n\n  onClickDone() {\n    if (this.state.toCompare.length < 1) {\n      alert(\"Select at least one car\");\n    } else if (this.state.calculationInfo === null) {\n      alert(\"Please enter driving distance\");\n    } else if (isNaN(this.state.calculationInfo.distance)) {\n      alert(\"Driving distance must be a numerical value\");\n    } else if (!this.state.showResult) {\n      this.setState((prevState) => ({\n        ...prevState,\n        showResult: true,\n      }));\n    }\n  }\n\n  onClickReset() {\n    window.location.reload();\n  }\n\n  onCarSelected(carNumber, name, vehicleId) {\n    this.setState((prevState) => ({\n      ...prevState,\n      toCompare: [\n        ...prevState.toCompare,\n        { car: carNumber, name: name, id: vehicleId },\n      ],\n    }));\n  }\n\n  onMileageInput(distance, isUnitsMiles) {\n    this.setState((prevState) => ({\n      ...prevState,\n      calculationInfo: {\n        distance: distance,\n        isUnitsMiles: isUnitsMiles,\n      },\n    }));\n  }\n\n  render() {\n    return (\n      <div>\n        <Instructions />\n        <div className=\"flexbox\" style={{ justifyContent: \"center\" }}>\n          <SelectCar key=\"1\" id=\"1\" onCarSelected={this.onCarSelected} />\n          <SelectCar key=\"2\" id=\"2\" onCarSelected={this.onCarSelected} />\n        </div>\n\n        <Mileage onMileageInput={this.onMileageInput} />\n        {this.state.showResult && (\n          <Result\n            cars={this.state.toCompare}\n            info={this.state.calculationInfo}\n          />\n        )}\n        <div className=\"flexbox\">\n          {!this.state.showResult && (\n            <ButtonDone onClickDone={this.onClickDone} />\n          )}\n          <ButtonReset onClickReset={this.onClickReset} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}